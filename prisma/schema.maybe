generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(uuid())
  email           String          @unique
  password        String
  accounts        Account[]
  sessions        Session[]
  configurations  Configuration[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Configuration {
  id                  String              @id @default(uuid())
  name                String
  observability       Observability?
  interop             Interop?
  altdaDeployConfig   AltdaDeployConfig?
  chains              Chain[]
  opContractDeployer  OpContractDeployer?
  userId              String?
  user                User?               @relation(fields: [userId], references: [id])
  
  // Global parameters from optimism_package
  globalLogLevel      String              @default("info")
  globalNodeSelectors Json?
  globalTolerations   Json?
  persistent          Boolean             @default(false)
  
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  expiresAt           DateTime?
}

model Observability {
  id               String            @id @default(uuid())
  enabled          Boolean
  prometheusParams PrometheusParams?
  grafanaParams    GrafanaParams?
  ConfigurationId  String            @unique
  Configuration    Configuration     @relation(fields: [ConfigurationId], references: [id])
}

model PrometheusParams {
  id                       String        @id @default(uuid())
  storageTsdbRetentionTime String
  storageTsdbRetentionSize String
  minCpu                   Int
  maxCpu                   Int
  minMem                   Int
  maxMem                   Int
  image                    String
  observabilityId          String        @unique
  observability            Observability @relation(fields: [observabilityId], references: [id])
}

model GrafanaParams {
  id               String        @id @default(uuid())
  dashboardSources Json?
  minCpu           Int
  maxCpu           Int
  minMem           Int
  maxMem           Int
  image            String
  observabilityId  String        @unique
  observability    Observability @relation(fields: [observabilityId], references: [id])
}

model Interop {
  id               String            @id @default(uuid())
  enabled          Boolean
  supervisorParams SupervisorParams?
  ConfigurationId  String            @unique
  Configuration    Configuration     @relation(fields: [ConfigurationId], references: [id])
}

model SupervisorParams {
  id            String  @id @default(uuid())
  image         String?
  dependencySet String?
  extraParams   Json?
  interopId     String  @unique
  interop       Interop @relation(fields: [interopId], references: [id])
}

model AltdaDeployConfig {
  id                         String        @id @default(uuid())
  useAltda                   Boolean
  daCommitmentType           String
  daChallengeWindow          Int
  daResolveWindow            Int
  daBondSize                 Int
  daResolverRefundPercentage Int
  ConfigurationId            String        @unique
  Configuration              Configuration @relation(fields: [ConfigurationId], references: [id])
}

model Chain {
  id                 String            @id @default(uuid())
  participants       Participant[]
  networkParams      NetworkParams?
  batcherParams      BatcherParams?
  challengerParams   ChallengerParams?
  proposerParams     ProposerParams?
  mevParams          MevParams?
  additionalServices Json?
  daServerParams     DaServerParams?
  ConfigurationId    String
  Configuration      Configuration     @relation(fields: [ConfigurationId], references: [id])
}

model Participant {
  id                String  @id @default(uuid())
  elType            String
  elImage           String?
  elLogLevel        String?
  elExtraEnvVars    Json?
  elExtraLabels     Json?
  elExtraParams     Json?
  elTolerations     Json?
  elVolumeSize      Int
  elMinCpu          Int
  elMaxCpu          Int
  elMinMem          Int
  elMaxMem          Int
  clType            String
  clImage           String?
  clLogLevel        String?
  clExtraEnvVars    Json?
  clExtraLabels     Json?
  clExtraParams     Json?
  clTolerations     Json?
  clVolumeSize      Int
  clMinCpu          Int
  clMaxCpu          Int
  clMinMem          Int
  clMaxMem          Int

  // Missing builder and selector parameters from YAML
  el_builder_type   String?
  el_builder_image  String?
  cl_builder_type   String?
  cl_builder_image  String?
  node_selectors    Json?
  tolerations       Json?

  count             Int
  chainId           String
  chain             Chain   @relation(fields: [chainId], references: [id])
}

model NetworkParams {
  id                 String  @id @default(uuid())
  network            String
  networkId          String
  secondsPerSlot     Int
  name               String
  fjordTimeOffset    Int?
  graniteTimeOffset  Int?
  holoceneTimeOffset Int?
  isthmusTimeOffset  Int?
  interopTimeOffset  Int?
  fundDevAccounts    Boolean
  chainId            String  @unique
  chain              Chain   @relation(fields: [chainId], references: [id])
}

model BatcherParams {
  id          String  @id @default(uuid())
  image       String?
  extraParams Json?
  chainId     String  @unique
  chain       Chain   @relation(fields: [chainId], references: [id])
}

model ChallengerParams {
  id                  String  @id @default(uuid())
  image               String?
  extraParams         Json?
  cannonPrestatesPath String?
  cannonPrestatesUrl  String?
  chainId             String  @unique
  chain               Chain   @relation(fields: [chainId], references: [id])
}

model ProposerParams {
  id               String  @id @default(uuid())
  image            String?
  extraParams      Json?
  gameType         Int
  proposalInternal String
  chainId          String  @unique
  chain            Chain   @relation(fields: [chainId], references: [id])
}

model MevParams {
  id               String  @id @default(uuid())
  rollupBoostImage String?
  builderHost      String?
  builderPort      String?
  chainId          String  @unique
  chain            Chain   @relation(fields: [chainId], references: [id])
}

model DaServerParams {
  id      String @id @default(uuid())
  image   String
  cmd     Json?
  chainId String @unique
  chain   Chain  @relation(fields: [chainId], references: [id])
}

model OpContractDeployer {
  id                 String        @id @default(uuid())
  image              String
  l1ArtifactsLocator String
  l2ArtifactsLocator String
  ConfigurationId    String        @unique
  Configuration      Configuration @relation(fields: [ConfigurationId], references: [id])
}

// New model for Ethereum package configuration
model EthereumPackage {
  id                           String   @id @default(uuid())
  preset                       String
  genesisDelay                 Int
  additionalPreloadedContracts Json?
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt
}
