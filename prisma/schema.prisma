generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid())
  email    String    @unique
  password String
  accounts Account[]
  sessions Session[]

  configurations Configuration[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Configuration {
  id String @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  name String
  description String?

  config Json
  
  userId String?
  user User? @relation(fields: [userId], references: [id])
  expiresAt DateTime?
}

// model Configuration {
//   id                 String              @id @default(uuid())
//   name               String
//   description        String?
//   observability      Observability?
//   interop            Interop?
//   altdaDeployConfig  AltdaDeployConfig?
//   chains             Chain[]
//   opContractDeployer OpContractDeployer?
//   userId             String?
//   user               User?               @relation(fields: [userId], references: [id])

//   globalLogLevel      LogLevel @default(INFO)
//   globalNodeSelectors Json?
//   persistent          Boolean  @default(false)

//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//   expiresAt DateTime?

//   globalTolerations Toleration[]
// }

// enum LogLevel {
//   ERROR
//   WARN
//   INFO
//   DEBUG
//   TRACE
// }

// model Toleration {
//   id String @id @default(uuid())

//   // Optional references, only one set at a time
//   configurationId String?
//   configuration   Configuration? @relation(fields: [configurationId], references: [id])

//   elParticipantId String?
//   elParticipant   Participant?   @relation("elTolerations", fields: [elParticipantId], references: [id])

//   clParticipantId String?
//   clParticipant   Participant?   @relation("clTolerations", fields: [clParticipantId], references: [id])

//   participantId   String?
//   participant     Participant?   @relation("participantTolerations", fields: [participantId], references: [id])

//   // Toleration fields
//   key               String
//   operator          TolerationOperator
//   value             String
//   effect            TolerationEffect
//   tolerationSeconds Int?
// }

// enum TolerationOperator {
//   EQUAL
//   EXISTS
// }

// enum TolerationEffect {
//   NO_SCHEDULE
//   NO_EXECUTE
//   PREFER_NO_SCHEDULE
// }


// model Observability {
//   id               String            @id @default(uuid())
//   enabled          Boolean
//   prometheusParams PrometheusParams?
//   grafanaParams    GrafanaParams?
//   ConfigurationId  String            @unique
//   Configuration    Configuration     @relation(fields: [ConfigurationId], references: [id])
// }

// model PrometheusParams {
//   id                       String        @id @default(uuid())
//   storageTsdbRetentionTime String
//   storageTsdbRetentionSize String
//   minCpu                   Int
//   maxCpu                   Int
//   minMem                   Int
//   maxMem                   Int
//   image                    String
//   observabilityId          String        @unique
//   observability            Observability @relation(fields: [observabilityId], references: [id])
// }

// model GrafanaParams {
//   id               String        @id @default(uuid())
//   dashboardSources Json?
//   minCpu           Int
//   maxCpu           Int
//   minMem           Int
//   maxMem           Int
//   image            String
//   observabilityId  String        @unique
//   observability    Observability @relation(fields: [observabilityId], references: [id])
// }

// model Interop {
//   id               String            @id @default(uuid())
//   enabled          Boolean
//   supervisorParams SupervisorParams?
//   ConfigurationId  String            @unique
//   Configuration    Configuration     @relation(fields: [ConfigurationId], references: [id])
// }

// // TODO: This should probably be in the interop model
// model SupervisorParams {
//   id            String  @id @default(uuid())
//   image         String?
//   dependencySet String?
//   extraParams   Json?
//   interopId     String  @unique
//   interop       Interop @relation(fields: [interopId], references: [id])
// }

// model AltdaDeployConfig {
//   id                         String        @id @default(uuid())
//   useAltda                   Boolean
//   daCommitmentType           String
//   daChallengeWindow          Int
//   daResolveWindow            Int
//   daBondSize                 Int
//   daResolverRefundPercentage Int
//   ConfigurationId            String        @unique
//   Configuration              Configuration @relation(fields: [ConfigurationId], references: [id])
// }

// model Chain {
//   id                 String            @id @default(uuid())
//   participants       Participant[]
//   networkParams      NetworkParams?
//   batcherParams      BatcherParams?
//   challengerParams   ChallengerParams?
//   proposerParams     ProposerParams?
//   mevParams          MevParams?
//   additionalServices AdditionalService[]
//   daServerParams     DaServerParams?
//   ConfigurationId    String
//   Configuration      Configuration     @relation(fields: [ConfigurationId], references: [id])
// }

// enum AdditionalService {
//   BLOCKSCOUT
//   ROLLUP_BOOST
//   DA_SERVER
// }

// model Participant {
//   id             String    @id @default(uuid())
//   elType         ElType
//   elImage        String?
//   elLogLevel     LogLevel?
//   elExtraEnvVars Json?
//   elExtraLabels  Json?
//   elExtraParams  Json?
//   elTolerations  Toleration[] @relation("elTolerations")
//   //   VOLUME_SIZE defaults if volume size is zero
//   //   "op_geth_volume_size": 5000,  # 5GB
//   //   "op_erigon_volume_size": 3000,  # 3GB
//   //   "op_nethermind_volume_size": 3000,  # 3GB
//   //   "op_besu_volume_size": 3000,  # 3GB
//   //   "op_reth_volume_size": 3000,  # 3GB
//   //   "op_node_volume_size": 1000,  # 1GB
//   //   "hildr_volume_size": 1000,  # 1GB
//   elVolumeSize   Int
//   // CPU is in millicores, 0 means no limit
//   elMinCpu       Int
//   elMaxCpu       Int
//   // Ram is in MB, 0 means no limit
//   elMinMem       Int
//   elMaxMem       Int
//   elBuilderType  String?
//   elBuilderImage String?

//   clType         ClType
//   clImage        String?
//   clLogLevel     LogLevel?
//   clExtraEnvVars Json?
//   clExtraLabels  Json?
//   clExtraParams  Json?
//   clTolerations  Toleration[] @relation("clTolerations")
//   clVolumeSize   Int
//   clMinCpu       Int
//   clMaxCpu       Int
//   clMinMem       Int
//   clMaxMem       Int
//   clBuilderType  String?
//   clBuilderImage String?

//   nodeSelectors Json?
//   tolerations   Toleration[] @relation("participantTolerations")
//   count         Int    @default(1)
//   chainId       String
//   chain         Chain  @relation(fields: [chainId], references: [id])
// }

// enum ElType {
//   OP_GETH
//   OP_RETH
//   OP_ERIGON
//   OP_NETHERMIND
//   OP_BESU
// }

// enum ClType {
//   OP_NODE
//   HILD
// }

// enum ElBuilderType {
//   OP_GETH
//   OP_RETH
// }

// enum ClBuilderType {
//   OP_NODE
//   HILD
// }


// model NetworkParams {
//   id                 String  @id @default(uuid())
//   network            String
//   networkId          String
//   secondsPerSlot     Int
//   name               String
//   fjordTimeOffset    Int?
//   graniteTimeOffset  Int?
//   holoceneTimeOffset Int?
//   isthmusTimeOffset  Int?
//   interopTimeOffset  Int?
//   fundDevAccounts    Boolean
//   chainId            String  @unique
//   chain              Chain   @relation(fields: [chainId], references: [id])
// }

// model BatcherParams {
//   id          String  @id @default(uuid())
//   image       String?
//   extraParams Json?
//   chainId     String  @unique
//   chain       Chain   @relation(fields: [chainId], references: [id])
// }

// model ChallengerParams {
//   id                  String  @id @default(uuid())
//   image               String?
//   extraParams         Json?
//   cannonPrestatesPath String?
//   cannonPrestatesUrl  String?
//   chainId             String  @unique
//   chain               Chain   @relation(fields: [chainId], references: [id])
// }

// model ProposerParams {
//   id               String  @id @default(uuid())
//   image            String?
//   extraParams      Json?
//   gameType         Int
//   proposalInternal String
//   chainId          String  @unique
//   chain            Chain   @relation(fields: [chainId], references: [id])
// }

// model MevParams {
//   id               String  @id @default(uuid())
//   rollupBoostImage String?
//   builderHost      String?
//   builderPort      String?
//   chainId          String  @unique
//   chain            Chain   @relation(fields: [chainId], references: [id])
// }

// model DaServerParams {
//   id      String @id @default(uuid())
//   image   String
//   cmd     Json?
//   chainId String @unique
//   chain   Chain  @relation(fields: [chainId], references: [id])
// }

// model OpContractDeployer {
//   id                 String        @id @default(uuid())
//   image              String
//   l1ArtifactsLocator String
//   l2ArtifactsLocator String
//   ConfigurationId    String        @unique
//   Configuration      Configuration @relation(fields: [ConfigurationId], references: [id])
// }
