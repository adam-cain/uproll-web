optimism_package:
  # Observability configuration
  observability:
    # Whether or not to configure observability (e.g. prometheus)
    enabled: true
    # Default prometheus configuration
    prometheus_params:
      storage_tsdb_retention_time: "1d"
      storage_tsdb_retention_size: "512MB"
      # Resource management for prometheus container
      # CPU is milicores
      # RAM is in MB
      min_cpu: 10
      max_cpu: 1000
      min_mem: 128
      max_mem: 2048
      # Prometheus docker image to use
      # Defaults to the latest image
      image: "prom/prometheus:latest"
    # Default grafana configuration
    grafana_params:
      # A list of locators for grafana dashboards to be loaded be the grafana service
      dashboard_sources: []
      # Resource management for grafana container
      # CPU is milicores
      # RAM is in MB
      min_cpu: 10
      max_cpu: 1000
      min_mem: 128
      max_mem: 2048
      # Grafana docker image to use
      # Defaults to the latest image
      image: "grafana/grafana:latest"
  # Interop configuration
  interop:
    # Whether or not to enable interop mode
    enabled: false
    # Default supervisor configuration
    supervisor_params:
      # The Docker image that should be used for the supervisor; leave blank to use the default op-supervisor image
      image: ""

      # A JSON string containing chain dependencies (generated by default).
      dependency_set: ""

      # A list of optional extra params that will be passed to the supervisor container for modifying its behaviour
      extra_params: []

  # AltDA Deploy Configuration, which is passed to op-deployer.
  #
  # For simplicity we currently enforce chains to all be altda or all rollups.
  # Adding a single altda chain to a cluster essentially makes all chains have altda levels of security.
  #
  # To setup an altda cluster, make sure to
  # 1. Set altda_deploy_config.use_altda to true (and da_commitment_type to KeccakCommitment, see TODO below)
  # 2. For each chain,
  #    - Add "da_server" to the additional_services list if it should use alt-da
  #    - For altda chains, set da_server_params to use an image and cmd of your choice (one could use da-server, another eigenda-proxy, another celestia proxy, etc). If unset, op's default da-server image will be used.
  altda_deploy_config:
    use_altda: false
    # TODO: Is this field redundant? Afaiu setting it to GenericCommitment will not deploy the
    # DAChallengeContract, and hence is equivalent to setting use_altda to false.
    # Furthermore, altda rollups using generic commitments might anyways need to support failing over
    # to keccak commitments if the altda layer is down.
    da_commitment_type: KeccakCommitment
    da_challenge_window: 100
    da_resolve_window: 100
    da_bond_size: 0
    da_resolver_refund_percentage: 0

  # An array of L2 networks to run
  chains:
    # Specification of the optimism-participants in the network
    - participants:
      # EL(Execution Layer) Specific flags
        # The type of EL client that should be started
        # Valid values are:
        # op-geth
        # op-reth
        # op-erigon
        # op-nethermind
        # op-besu
      - el_type: op-geth

        # The Docker image that should be used for the EL client; leave blank to use the default for the client type
        # Defaults by client:
        # - op-geth: us-docker.pkg.dev/oplabs-tools-artifacts/images/op-geth:latest
        # - op-reth: parithoshj/op-reth:latest
        # - op-erigon: testinprod/op-erigon:latest
        # - op-nethermind: nethermindeth/nethermind:op-c482d56
        # - op-besu: ghcr.io/optimism-java/op-besu:latest
        el_image: ""

        # The log level string that this participant's EL client should log at
        # If this is emptystring then the global `logLevel` parameter's value will be translated into a string appropriate for the client (e.g. if
        # global `logLevel` = `info` then Geth would receive `3`, Besu would receive `INFO`, etc.)
        # If this is not emptystring, then this value will override the global `logLevel` setting to allow for fine-grained control
        # over a specific participant's logging
        el_log_level: ""

        # A list of optional extra env_vars the el container should spin up with
        el_extra_env_vars: {}

        # A list of optional extra labels the el container should spin up with
        # Example; el_extra_labels: {"ethereum-package.partition": "1"}
        el_extra_labels: {}

        # A list of optional extra params that will be passed to the EL client container for modifying its behaviour
        el_extra_params: []

        # A list of tolerations that will be passed to the EL client container
        # Only works with Kubernetes
        # Example: el_tolerations:
        # - key: "key"
        #   operator: "Equal"
        #   value: "value"
        #   effect: "NoSchedule"
        #   toleration_seconds: 3600
        # Defaults to empty
        el_tolerations: []

        # Persistent storage size for the EL client container (in MB)
        # Defaults to 0, which means that the default size for the client will be used
        # Default values can be found in /src/package_io/constants.star VOLUME_SIZE
        el_volume_size: 0

        # Resource management for el containers
        # CPU is milicores
        # RAM is in MB
        # Defaults to 0, which results in no resource limits
        el_min_cpu: 0
        el_max_cpu: 0
        el_min_mem: 0
        el_max_mem: 0

      # CL(Consensus Layer) Specific flags
        # The type of CL client that should be started
        # Valid values are:
        # op-node
        # hildr
        cl_type: op-node

        # The Docker image that should be used for the CL client; leave blank to use the default for the client type
        # Defaults by client:
        # - op-node: us-docker.pkg.dev/oplabs-tools-artifacts/images/op-node:develop
        # - hildr: ghcr.io/optimism-java/hildr:latest
        cl_image: ""

        # The log level string that this participant's CL client should log at
        # If this is emptystring then the global `logLevel` parameter's value will be translated into a string appropriate for the client (e.g. if
        # If this is not emptystring, then this value will override the global `logLevel` setting to allow for fine-grained control
        # over a specific participant's logging
        cl_log_level: ""

        # A list of optional extra env_vars the cl container should spin up with
        cl_extra_env_vars: {}

        # A list of optional extra labels that will be passed to the CL client Beacon container.
        # Example; cl_extra_labels: {"ethereum-package.partition": "1"}
        cl_extra_labels: {}

        # A list of optional extra params that will be passed to the CL client Beacon container for modifying its behaviour
        # If the client combines the Beacon & validator nodes (e.g. Teku, Nimbus), then this list will be passed to the combined Beacon-validator node
        cl_extra_params: []

        # A list of tolerations that will be passed to the CL client container
        # Only works with Kubernetes
        # Example: el_tolerations:
        # - key: "key"
        #   operator: "Equal"
        #   value: "value"
        #   effect: "NoSchedule"
        #   toleration_seconds: 3600
        # Defaults to empty
        cl_tolerations: []

        # Persistent storage size for the CL client container (in MB)
        # Defaults to 0, which means that the default size for the client will be used
        # Default values can be found in /src/package_io/constants.star VOLUME_SIZE
        cl_volume_size: 0

        # Resource management for cl containers
        # CPU is milicores
        # RAM is in MB
        # Defaults to 0, which results in no resource limits
        cl_min_cpu: 0
        cl_max_cpu: 0
        cl_min_mem: 0
        cl_max_mem: 0

      # Builder client specific flags
        # The type of builder EL client that should be started
        # Valid values are:
        # op-geth
        # op-reth
        el_builder_type: ""

        # The Docker image that should be used for the builder EL client; leave blank to use the default for the client type
        # Defaults by client:
        # - op-geth: us-docker.pkg.dev/oplabs-tools-artifacts/images/op-geth:latest
        # - op-reth: parithoshj/op-reth:latest
        el_builder_image: ""

        # The type of builder CL client that should be started
        # Valid values are:
        # op-node
        # hildr
        cl_builder_type: ""

        # The Docker image that should be used for the builder CL client; leave blank to use the default for the client type
        # Defaults by client:
        # - op-node: us-docker.pkg.dev/oplabs-tools-artifacts/images/op-node:develop
        # - hildr: ghcr.io/optimism-java/hildr:latest
        cl_builder_image: ""

        # Participant specific flags
        # Node selector
        # Only works with Kubernetes
        # Example: node_selectors: { "disktype": "ssd" }
        # Defaults to empty
        node_selectors: {}

        # A list of tolerations that will be passed to the EL/CL/validator containers
        # This is to be used when you don't want to specify the tolerations for each container separately
        # Only works with Kubernetes
        # Example: tolerations:
        # - key: "key"
        #   operator: "Equal"
        #   value: "value"
        #   effect: "NoSchedule"
        #   toleration_seconds: 3600
        # Defaults to empty
        tolerations: []

        # Count of nodes to spin up for this participant
        # Default to 1
        count: 1

      # Default configuration parameters for the network
      network_params:
        # Network name, used to enable syncing of alternative networks
        # Defaults to "kurtosis"
        network: "kurtosis"

        # The network ID of the network.
        # Must be unique for each network (if you run multiple networks)
        # Defaults to "2151908"
        network_id: "2151908"

        # Seconds per slots
        seconds_per_slot: 2

        # Name of your rollup.
        # Must be unique for each rollup (if you run multiple rollups)
        # Defaults to "op-kurtosis"
        name: "op-kurtosis"

        # Triggering future forks in the network
        # Fjord fork
        # Defaults to 0 (genesis activation) - decimal value
        # Offset is in seconds
        fjord_time_offset: 0

        # Granite fork
        # Defaults to 0 (genesis activation) - decimal value
        # Offset is in seconds
        granite_time_offset: 0

        # Holocene fork
        # Defaults to None - not activated - decimal value
        # Offset is in seconds
        holocene_time_offset: ""

        # Isthmus fork
        # Defaults to None - not activated - decimal value
        # Offset is in seconds
        isthmus_time_offset: ""

        # Interop fork
        # Defaults to None - not activated - decimal value
        # Offset is in seconds
        interop_time_offset: ""

        # Whether to fund dev accounts on L2
        # Defaults to True
        fund_dev_accounts: true

      # Default batcher configuration
      batcher_params:
        # The Docker image that should be used for the batcher; leave blank to use the default op-batcher image
        image: ""

        # A list of optional extra params that will be passed to the batcher container for modifying its behaviour
        extra_params: []

      # Default challenger configuration
      challenger_params:
        # The Docker image that should be used for the challenger; leave blank to use the default op-challenger image
        image: ""

        # A list of optional extra params that will be passed to the challenger container for modifying its behaviour
        extra_params: []

        # Path to folder containing cannon prestate-proof.json file
        cannon_prestates_path: "static_files/prestates"

        # Base URL to absolute prestates to use when generating trace data.
        cannon_prestates_url: ""

      # Default proposer configuration
      proposer_params:
        # The Docker image that should be used for the proposer; leave blank to use the default op-proposer image
        image: ""

        # A list of optional extra params that will be passed to the proposer container for modifying its behaviour
        extra_params: []

        # Dispute game type to create via the configured DisputeGameFactory
        game_type: 1

        # Interval between submitting L2 output proposals
        proposal_internal: 10m

      # Default MEV configuration
      mev_params:
        # The Docker image that should be used for rollup boost; leave blank to use the default rollup-boost image
        # Defaults to "flashbots/rollup-boost:latest"
        rollup_boost_image: ""

        # The host of an external builder
        builder_host: ""

        # The port of an external builder
        builder_port: ""

      # Additional services to run alongside the network
      # Defaults to []
      # Available services:
      # - blockscout
      # - rollup-boost
      # - da_server
      additional_services: []

      # Configuration for da-server - https://specs.optimism.io/experimental/alt-da.html#da-server
      # TODO: each op-node and op-batcher should potentially have their own da-server, instead of sharing one like we currently do. For eg batcher needs to write via its da-server, whereas op-nodes don't.
      da_server_params:
        image: us-docker.pkg.dev/oplabs-tools-artifacts/images/da-server:latest
        # Command to pass to the container.
        # This is kept maximally generic to allow for any possible configuration, given that different
        # da layer da-servers might have completely different flags.
        # The below arguments are also the default, so can be omitted, and will work as long as the image
        # is the da-server above (which is also the default, so can also be omitted).
        cmd:
          - "da-server"
          - "--file.path=/home"
          - "--addr=0.0.0.0"
          - "--port=3100"
          - "--log.level=debug"

  # L2 contract deployer configuration - used for all L2 networks
  # The docker image that should be used for the L2 contract deployer
  op_contract_deployer_params:
    image: us-docker.pkg.dev/oplabs-tools-artifacts/images/op-deployer:v0.0.11
    l1_artifacts_locator: https://storage.googleapis.com/oplabs-contract-artifacts/artifacts-v1-c193a1863182092bc6cb723e523e8313a0f4b6e9c9636513927f1db74c047c15.tar.gz
    l2_artifacts_locator: https://storage.googleapis.com/oplabs-contract-artifacts/artifacts-v1-c193a1863182092bc6cb723e523e8313a0f4b6e9c9636513927f1db74c047c15.tar.gz

  # The global log level that all clients should log at
  # Valid values are "error", "warn", "info", "debug", and "trace"
  # This value will be overridden by participant-specific values
  global_log_level: "info"

  # Global node selector that will be passed to all containers (unless overridden by a more specific node selector)
  # Only works with Kubernetes
  # Example: global_node_selectors: { "disktype": "ssd" }
  # Defaults to empty
  global_node_selectors: {}

  # Global tolerations that will be passed to all containers (unless overridden by a more specific toleration)
  # Only works with Kubernetes
  # Example: tolerations:
  # - key: "key"
  #   operator: "Equal"
  #   value: "value"
  #   effect: "NoSchedule"
  #   toleration_seconds: 3600
  # Defaults to empty
  global_tolerations: []

  # Whether the environment should be persistent; this is WIP and is slowly being rolled out accross services
  # Defaults to false
  persistent: false

# Ethereum package configuration
ethereum_package:
  network_params:
    # The Ethereum network preset to use
    preset: minimal
    # The delay in seconds before the genesis block is mined
    genesis_delay: 5
    # Preloaded contracts for the Ethereum network
    additional_preloaded_contracts: '
      {
        "0x4e59b44847b379578588920cA78FbF26c0B4956C": {
          "balance": "0ETH",
          "code": "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601600081602082378035828234f58015156039578182fd5b8082525050506014600cf3",
          "storage": {},
          "nonce": "1"
        }
      }
    '
